# setup_demo.py - –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–µ–º–æ-–≤–µ—Ä—Å–∏–∏
import asyncio
import logging
from typing import List
from datetime import datetime, timedelta

from config import config
from core.database import init_database
from integrations.tinkoff_integration import TinkoffIntegration, sync_instruments_from_tinkoff
from analysis.signal_matcher import SignalMatcher

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=getattr(logging, config.log_level),
    format="%(asctime)s [%(levelname)s] %(name)s: %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S",
)
logger = logging.getLogger("setup_demo")

class DemoSetup:
    """–ö–ª–∞—Å—Å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–µ–º–æ-–≤–µ—Ä—Å–∏–∏"""
    
    def __init__(self):
        self.db_manager = None
        self.tinkoff_client = None
        self.signal_matcher = None
    
    async def run_full_setup(self):
        """–ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–µ–º–æ-–≤–µ—Ä—Å–∏–∏"""
        logger.info("üöÄ Starting demo setup...")
        
        try:
            # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            await self.setup_database()
            
            # 2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Tinkoff –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
            if config.enable_tinkoff:
                await self.setup_tinkoff()
            
            # 3. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            await self.create_sample_data()
            
            # 4. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
            await self.setup_signal_tracking()
            
            logger.info("‚úÖ Demo setup completed successfully!")
            
        except Exception as e:
            logger.error(f"‚ùå Demo setup failed: {e}")
            raise
    
    async def setup_database():
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        print("üóÑÔ∏è NOT YET IMPLEMENTED ADD DOCKER COMMAND - 'zver@pop-os:~/Documents/stuff/tbot2/tbot$ sudo docker run -d   --name timescaledb_trader_tracker   -p 5432:5432   -e POSTGRES_PASSWORD=password   -e POSTGRES_DB=trader_tracker  timescale/timescaledb:latest-pg15'")
        
        return True
        
    async def setup_tinkoff(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Tinkoff –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        logger.info("üìà Setting up Tinkoff integration...")
        
        try:
            if not config.tinkoff.token:
                logger.warning("‚ö†Ô∏è Tinkoff token not configured, skipping...")
                return
            
            self.tinkoff_client = TinkoffIntegration(config.tinkoff.token)
            success = await self.tinkoff_client.initialize()
            
            if success:
                logger.info("‚úÖ Tinkoff client initialized")
                
                # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
                await self.sync_popular_instruments()
                
            else:
                logger.error("‚ùå Tinkoff initialization failed")
                
        except Exception as e:
            logger.error(f"‚ùå Tinkoff setup failed: {e}")
            raise
    
    async def sync_popular_instruments(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        logger.info("üîÑ Syncing popular instruments...")
        
        popular_tickers = [
            "SBER", "GAZP", "LKOH", "GMKN", "NVTK", 
            "YNDX", "PLZL", "MGNT", "ROSN", "TATN"
        ]
        
        synced = 0
        for ticker in popular_tickers:
            try:
                instrument = await self.tinkoff_client.find_instrument_by_ticker(ticker)
                if instrument:
                    synced += 1
                    logger.info(f"‚úì Synced {ticker}")
                else:
                    logger.warning(f"‚úó Failed to find {ticker}")
                    
            except Exception as e:
                logger.error(f"Error syncing {ticker}: {e}")
        
        logger.info(f"üìä Synced {synced}/{len(popular_tickers)} instruments")
    
    async def create_sample_data(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞–∑—Ü–æ–≤ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ–º–æ"""
        logger.info("üé≠ Creating sample data...")
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª
            sample_channel = {
                'id': -1001234567890,
                'name': 'Demo Trading Channel',
                'username': 'demo_trading',
                'is_active': True
            }
            
            with self.db_manager.session_scope() as session:
                from core.models import Channel
                channel = Channel(**sample_channel)
                session.merge(channel)
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç—Ä–µ–π–¥–µ—Ä–æ–≤
            sample_traders = [
                "DemoTrader1", "SignalMaster", "TechAnalyst", 
                "MarketGuru", "StockPicker"
            ]
            
            for trader_name in sample_traders:
                with self.db_manager.session_scope() as session:
                    from core.models import Trader
                    trader = Trader(
                        name=trader_name,
                        channel_id=sample_channel['id'],
                        is_active=True,
                        first_signal_at=datetime.now() - timedelta(days=30)
                    )
                    session.merge(trader)
            
            logger.info(f"‚úÖ Created sample data: 1 channel, {len(sample_traders)} traders")
            
        except Exception as e:
            logger.error(f"‚ùå Sample data creation failed: {e}")
            raise
    
    async def setup_signal_tracking(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤"""
        logger.info("üéØ Setting up signal tracking...")
        
        try:
            self.signal_matcher = SignalMatcher(self.db_manager, self.tinkoff_client)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–∏–≥–Ω–∞–ª—ã
            if self.tinkoff_client:
                processed = await self.signal_matcher.process_untracked_signals(limit=10)
                logger.info(f"üìä Processed {processed} existing signals")
            
            logger.info("‚úÖ Signal tracking setup completed")
            
        except Exception as e:
            logger.error(f"‚ùå Signal tracking setup failed: {e}")
            raise
    
    async def run_health_check(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
        logger.info("üè• Running health check...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ë–î
            stats = self.db_manager.get_statistics()
            logger.info(f"üìä DB Stats: {stats}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ Tinkoff
            if self.tinkoff_client:
                test_price = await self.tinkoff_client.get_current_price("SBER")
                if test_price:
                    logger.info(f"üìà Tinkoff OK: SBER = {test_price['price']}")
                else:
                    logger.warning("‚ö†Ô∏è Tinkoff price fetch failed")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–π–¥–µ—Ä–æ–≤
            traders = self.db_manager.get_all_traders_stats()
            logger.info(f"üë• Active traders: {len(traders)}")
            
            logger.info("‚úÖ Health check completed")
            
        except Exception as e:
            logger.error(f"‚ùå Health check failed: {e}")
            raise

# –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    setup = DemoSetup()
    await setup.run_full_setup()
    await setup.run_health_check()

def run_setup():
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    asyncio.run(main())

if __name__ == "__main__":
    run_setup()