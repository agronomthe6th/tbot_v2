# migrate_data.py - –ü—Ä–æ—Å—Ç–æ–π –ø–µ—Ä–µ–Ω–æ—Å raw_messages –∏–∑ —Å—Ç–∞—Ä–æ–π –ë–î –≤ –Ω–æ–≤—É—é
"""
–°–ö–†–ò–ü–¢ –ú–ò–ì–†–ê–¶–ò–ò RAW MESSAGES

–ù–ê–ó–ù–ê–ß–ï–ù–ò–ï: 
–ü—Ä–æ—Å—Ç–æ –∫–æ–ø–∏—Ä—É–µ—Ç raw_messages –∏–∑ —Å—Ç–∞—Ä–æ–π –ë–î (trading_signals:5433) –≤ –Ω–æ–≤—É—é (trader_tracker:5432)

–õ–û–ì–ò–ö–ê:
1. –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ —Å—Ç–∞—Ä–æ–π –ë–î –Ω–∞ –ø–æ—Ä—Ç—É 5433
2. –ß–∏—Ç–∞–µ—Ç –≤—Å–µ raw_messages 
3. –í—Å—Ç–∞–≤–ª—è–µ—Ç –∏—Ö –≤ –Ω–æ–≤—É—é –ë–î –Ω–∞ –ø–æ—Ä—Ç—É 5432
4. –ù–ò–ö–ê–ö–û–ô –û–ë–†–ê–ë–û–¢–ö–ò - –ø—Ä–æ—Å—Ç–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ!

–ü–ê–†–°–ò–ù–ì –°–ò–ì–ù–ê–õ–û–í:
–î–µ–ª–∞–µ—Ç—Å—è –û–¢–î–ï–õ–¨–ù–û —á–µ—Ä–µ–∑ regex –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏.
–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç —Å—ã—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.

–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:
python migrate_data.py [--dry-run] [--limit N]

–°–¢–†–£–ö–¢–£–†–ê –°–¢–ê–†–û–ô –ë–î (raw_messages):
- id, timestamp, channel_id, message_id  
- author_id, author_username, author_first_name
- text, views, forwards, edit_date
- media_type, reply_to_message_id, raw_data
- collected_at, is_processed, processing_attempts
"""

import asyncio
import logging
import argparse
from datetime import datetime
from typing import Dict, List, Optional
import json

import psycopg2
from psycopg2.extras import RealDictCursor
from core.database import UnifiedDatabaseManager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S",
)
logger = logging.getLogger("raw_migration")

class RawMessageMigration:
    """–ü—Ä–æ—Å—Ç–∞—è –º–∏–≥—Ä–∞—Ü–∏—è raw_messages –º–µ–∂–¥—É –ë–î"""
    
    def __init__(self, old_db_url: str, new_db_url: str, dry_run: bool = False):
        self.old_db_url = old_db_url  
        self.new_db_url = new_db_url
        self.dry_run = dry_run
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        self.old_conn = None
        self.new_db_manager = None
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'total_found': 0,
            'migrated': 0,
            'skipped': 0,
            'errors': 0
        }
    
    async def run_migration(self, limit: Optional[int] = None):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏"""
        logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å raw_messages...")
        logger.info(f"–†–µ–∂–∏–º: {'DRY RUN' if self.dry_run else '–†–ï–ê–õ–¨–ù–´–ô –ü–ï–†–ï–ù–û–°'}")
        
        try:
            # 1. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
            await self._connect_databases()
            
            # 2. –ó–∞–≥—Ä—É–∑–∫–∞ raw_messages –∏–∑ —Å—Ç–∞—Ä–æ–π –ë–î
            old_messages = await self._load_old_raw_messages(limit)
            self.stats['total_found'] = len(old_messages)
            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(old_messages)} raw_messages")
            
            # 3. –ü–µ—Ä–µ–Ω–æ—Å –≤ –Ω–æ–≤—É—é –ë–î
            await self._migrate_raw_messages(old_messages)
            
            # 4. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            self._print_stats()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
            raise
        finally:
            await self._disconnect()
        
        logger.info("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è raw_messages –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    
    async def _connect_databases(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å—Ç–∞—Ä–æ–π –∏ –Ω–æ–≤–æ–π –ë–î"""
        logger.info("üîå –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö...")
        
        # –°—Ç–∞—Ä–∞—è –ë–î
        try:
            self.old_conn = psycopg2.connect(self.old_db_url)
            self.old_conn.set_client_encoding('UTF8')
            logger.info("‚úÖ –°—Ç–∞—Ä–∞—è –ë–î –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
        except Exception as e:
            logger.error(f"‚ùå –°—Ç–∞—Ä–∞—è –ë–î: {e}")
            raise
        
        # –ù–æ–≤–∞—è –ë–î
        try:
            self.new_db_manager = UnifiedDatabaseManager(self.new_db_url)
            if not self.new_db_manager.initialize():
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—É—é –ë–î")
            logger.info("‚úÖ –ù–æ–≤–∞—è –ë–î –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
        except Exception as e:
            logger.error(f"‚ùå –ù–æ–≤–∞—è –ë–î: {e}")
            raise
    
    async def _load_old_raw_messages(self, limit: Optional[int] = None) -> List[Dict]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ raw_messages –∏–∑ —Å—Ç–∞—Ä–æ–π –ë–î"""
        logger.info("üì• –ó–∞–≥—Ä—É–∂–∞–µ–º raw_messages –∏–∑ —Å—Ç–∞—Ä–æ–π –ë–î...")
        
        # –ü—Ä–æ—Å—Ç–æ–π SELECT * –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        query = """
            SELECT 
                id, timestamp, channel_id, message_id,
                author_id, author_username, author_first_name,
                text, views, forwards, edit_date,
                media_type, reply_to_message_id, raw_data,
                collected_at, is_processed, processing_attempts
            FROM raw_messages 
            ORDER BY timestamp ASC
        """
        
        if limit:
            query += f" LIMIT {limit}"
        
        with self.old_conn.cursor(cursor_factory=RealDictCursor) as cursor:
            cursor.execute(query)
            messages = cursor.fetchall()
        
        return [dict(msg) for msg in messages]
    
    async def _migrate_raw_messages(self, old_messages: List[Dict]):
        """–ü–µ—Ä–µ–Ω–æ—Å raw_messages –≤ –Ω–æ–≤—É—é –ë–î"""
        logger.info(f"üîÑ –ü–µ—Ä–µ–Ω–æ—Å–∏–º {len(old_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π...")
        
        for i, old_msg in enumerate(old_messages, 1):
            try:
                success = await self._insert_single_message(old_msg)
                
                if success:
                    self.stats['migrated'] += 1
                else:
                    self.stats['skipped'] += 1
                
                # –ü—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 100 —Å–æ–æ–±—â–µ–Ω–∏–π
                if i % 100 == 0:
                    logger.info(f"üìà –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {i}/{len(old_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º {old_msg.get('id', '?')}: {e}")
                self.stats['errors'] += 1
                continue
    
    async def _insert_single_message(self, old_msg: Dict) -> bool:
        """–í—Å—Ç–∞–≤–∫–∞ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –Ω–æ–≤—É—é –ë–î"""
        
        if self.dry_run:
            # –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ–º
            logger.debug(f"DRY RUN: —Å–æ–æ–±—â–µ–Ω–∏–µ {old_msg['id']} –æ—Ç {old_msg['timestamp']}")
            return True
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–π –ë–î
        # –ù–ï –ü–ê–†–°–ò–ú - –ø—Ä–æ—Å—Ç–æ –∫–æ–ø–∏—Ä—É–µ–º –∫–∞–∫ –µ—Å—Ç—å!
        new_msg_data = {
            # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
            'timestamp': old_msg['timestamp'],
            'collected_at': old_msg['collected_at'],
            
            # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
            'channel_id': old_msg['channel_id'],
            'message_id': old_msg['message_id'],
            
            # –ê–≤—Ç–æ—Ä
            'author_id': old_msg['author_id'],
            'author_username': old_msg['author_username'],
            'author_first_name': old_msg['author_first_name'],
            
            # –°–æ–¥–µ—Ä–∂–∏–º–æ–µ
            'text': old_msg['text'] or '',
            'views': old_msg['views'] or 0,
            'forwards': old_msg['forwards'] or 0,
            'edit_date': old_msg['edit_date'],
            
            # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            'media_type': old_msg['media_type'],
            'reply_to_message_id': old_msg['reply_to_message_id'],
            'raw_data': old_msg['raw_data'],  # JSON –∫–∞–∫ –µ—Å—Ç—å
            
            # –°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏
            'is_processed': old_msg['is_processed'] or False,
            'processing_attempts': old_msg['processing_attempts'] or 0
        }
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä –ë–î
        message_id = self.new_db_manager.save_raw_message(**new_msg_data)
        
        return message_id is not None
    
    def _print_stats(self):
        """–í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∏–≥—Ä–∞—Ü–∏–∏"""
        logger.info("\n" + "="*50)
        logger.info("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ú–ò–ì–†–ê–¶–ò–ò")
        logger.info("="*50)
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ –≤ —Å—Ç–∞—Ä–æ–π –ë–î: {self.stats['total_found']}")
        logger.info(f"–£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ: {self.stats['migrated']}")
        logger.info(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ: {self.stats['skipped']}")
        logger.info(f"–û—à–∏–±–æ–∫: {self.stats['errors']}")
        logger.info("="*50)
        
        if self.stats['total_found'] > 0:
            success_rate = (self.stats['migrated'] / self.stats['total_found']) * 100
            logger.info(f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
    
    async def _disconnect(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"""
        if self.old_conn:
            self.old_conn.close()
        logger.info("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç—ã")


# CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
async def main():
    parser = argparse.ArgumentParser(description="–ú–∏–≥—Ä–∞—Ü–∏—è raw_messages –º–µ–∂–¥—É –ë–î")
    parser.add_argument(
        '--dry-run', 
        action='store_true', 
        help='–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ë–î'
    )
    parser.add_argument(
        '--limit', 
        type=int, 
        help='–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏'
    )
    parser.add_argument(
        '--old-db',
        default='postgresql://postgres:password@localhost:5433/trading_signals',
        help='URL —Å—Ç–∞—Ä–æ–π –ë–î'
    )
    parser.add_argument(
        '--new-db', 
        default='postgresql://postgres:password@localhost:5432/trader_tracker',
        help='URL –Ω–æ–≤–æ–π –ë–î'
    )
    
    args = parser.parse_args()
    
    # –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏
    migration = RawMessageMigration(
        old_db_url=args.old_db,
        new_db_url=args.new_db,
        dry_run=args.dry_run
    )
    
    await migration.run_migration(limit=args.limit)


if __name__ == "__main__":
    print("""
    –ú–ò–ì–†–ê–¶–ò–Ø RAW MESSAGES
    =====================
    
    –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ—Å—Ç–æ –∫–æ–ø–∏—Ä—É–µ—Ç raw_messages –∏–∑ —Å—Ç–∞—Ä–æ–π –ë–î –≤ –Ω–æ–≤—É—é.
    –ù–ò–ö–ê–ö–û–ô –û–ë–†–ê–ë–û–¢–ö–ò - —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö –∫–∞–∫ –µ—Å—Ç—å!
    
    –ü–∞—Ä—Å–∏–Ω–≥ —Å–∏–≥–Ω–∞–ª–æ–≤ –±—É–¥–µ—Ç –¥–µ–ª–∞—Ç—å—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ regex.
    
    –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫
    python migrate_data.py --dry-run --limit 10
    
    # –†–µ–∞–ª—å–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π  
    python migrate_data.py
    
    # –ú–∏–≥—Ä–∞—Ü–∏—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º
    python migrate_data.py --limit 1000
    
    """)
    
    asyncio.run(main())