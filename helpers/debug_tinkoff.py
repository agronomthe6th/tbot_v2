# debug_tinkoff.py - –°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å Tinkoff —Ç–æ–∫–µ–Ω–æ–º
import os
import asyncio
from dotenv import load_dotenv

async def debug_tinkoff_token():
    """–ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å Tinkoff —Ç–æ–∫–µ–Ω–æ–º"""
    
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê TINKOFF TOKEN")
    print("=" * 50)
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ .env —Ñ–∞–π–ª–∞
    load_dotenv()
    print("‚úÖ .env —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω")
    
    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
    token = os.getenv("TINKOFF_TOKEN")
    sandbox = os.getenv("TINKOFF_SANDBOX")
    
    print(f"üìã TOKEN –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {token is not None}")
    print(f"üìã TOKEN –¥–ª–∏–Ω–∞: {len(token) if token else 0}")
    print(f"üìã TOKEN –ø–µ—Ä–≤—ã–µ 10 —Å–∏–º–≤–æ–ª–æ–≤: {token[:10] if token else '–ù–ï–¢'}")
    print(f"üìã TOKEN –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–∏–º–≤–æ–ª–æ–≤: {token[-10:] if token else '–ù–ï–¢'}")
    print(f"üìã SANDBOX —Ä–µ–∂–∏–º: {sandbox}")
    
    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫—Ä—ã—Ç—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Ç–æ–∫–µ–Ω–µ
    if token:

        
        # –û—á–∏—Å—Ç–∫–∞ —Ç–æ–∫–µ–Ω–∞ –æ—Ç –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Å–∫—Ä—ã—Ç—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        clean_token = token.strip().replace('\n', '').replace('\r', '')
        print(f"üìã TOKEN –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –¥–ª–∏–Ω–∞: {len(clean_token)}")
        print(f"üìã –¢–æ–∫–µ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: {token != clean_token}")
    
    # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ tinkoff-invest
    try:
        from tinkoff.invest import AsyncClient
        print("‚úÖ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ tinkoff-invest –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
        try:
            import tinkoff.invest
            print(f"üì¶ –í–µ—Ä—Å–∏—è tinkoff-invest: {getattr(tinkoff.invest, '__version__', '–ù–ï–ò–ó–í–ï–°–¢–ù–û')}")
        except:
            print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–µ—Ä—Å–∏—é tinkoff-invest")
            
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ tinkoff-invest: {e}")
        return
    
    # 5. –¢–µ—Å—Ç –ø—Ä—è–º–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (—Å—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–±)
    if token:
        print("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø...")
        clean_token = token.strip()
        
        try:
            async with AsyncClient(clean_token) as client:
                print("‚úÖ AsyncClient —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                
                # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã
                accounts = await client.users.get_accounts()
                print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –∞–∫–∫–∞—É–Ω—Ç—ã: {len(accounts.accounts)}")
                
                for i, account in enumerate(accounts.accounts):
                    print(f"   –ê–∫–∫–∞—É–Ω—Ç {i+1}: {account.name} ({account.type})")
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
            print(f"üìã –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
            error_str = str(e)
            if "UNAUTHENTICATED" in error_str:
                print("üîç –≠—Ç–æ –æ—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏!")
                if "40003" in error_str:
                    print("üîç –ö–æ–¥ –æ—à–∏–±–∫–∏ 40003 - —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            
    # 6. –¢–µ—Å—Ç —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ —Ç–æ–∫–µ–Ω–∞
    if token:
        print("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ê–ó–õ–ò–ß–ù–´–• –í–ê–†–ò–ê–ù–¢–û–í –¢–û–ö–ï–ù–ê...")
        
        test_tokens = [
            ("–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–æ–∫–µ–Ω", token),
            ("–û—á–∏—â–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω", token.strip()),
            ("–¢–æ–∫–µ–Ω –±–µ–∑ \\n –∏ \\r", token.replace('\n', '').replace('\r', '')),
        ]
        
        for name, test_token in test_tokens:
            if test_token != token:  # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è
                print(f"\nüî¨ –¢–µ—Å—Ç–∏—Ä—É–µ–º: {name}")
                try:
                    async with AsyncClient(test_token) as client:
                        accounts = await client.users.get_accounts()
                        print(f"‚úÖ {name} - –†–ê–ë–û–¢–ê–ï–¢! –ê–∫–∫–∞—É–Ω—Ç–æ–≤: {len(accounts.accounts)}")
                        return test_token  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–∞–±–æ—á–∏–π —Ç–æ–∫–µ–Ω
                except Exception as e:
                    print(f"‚ùå {name} - –ù–ï –†–ê–ë–û–¢–ê–ï–¢: {str(e)[:100]}")
    
    # 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ curl (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
    print("\nüåê –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –†–£–ß–ù–û–ô –ü–†–û–í–ï–†–ö–ò:")
    if token:
        clean_token = token.strip()
        print("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ:")
        print(f'curl -H "Authorization: Bearer {clean_token}" \\')
        print('     -H "Content-Type: application/json" \\')
        print('     "https://invest-public-api.tinkoff.ru/rest/tinkoff.public.invest.api.contract.v1.UsersService/GetAccounts"')
    
    print("\nüîß –í–û–ó–ú–û–ñ–ù–´–ï –†–ï–®–ï–ù–ò–Ø:")
    print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –≤ Tinkoff API Console")
    print("2. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω")
    print("3. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Ç–æ–∫–µ–Ω –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ (sandbox/production)")
    print("4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞")

if __name__ == "__main__":
    asyncio.run(debug_tinkoff_token())