// frontend/src/services/api.js - –ü–û–õ–ù–û–°–¢–¨–Æ –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
import axios from 'axios'

// –ë–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
const API_BASE_URL = import.meta.env.VITE_API_URL || 'http://localhost:8000'

const api = axios.create({
  baseURL: API_BASE_URL,
  timeout: 30000,
  headers: {
    'Content-Type': 'application/json',
  }
})

// –ò–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
api.interceptors.response.use(
  (response) => response,
  (error) => {
    console.error('API Error:', {
      url: error.config?.url,
      method: error.config?.method,
      status: error.response?.status,
      data: error.response?.data
    })
    return Promise.reject(error)
  }
)

export const tradingAPI = {
  // ===== üìä –°–í–ï–ß–ò –ò –†–´–ù–û–ß–ù–´–ï –î–ê–ù–ù–´–ï =====
  
  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–µ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö - –¢–û–õ–¨–ö–û –ß–¢–ï–ù–ò–ï, –±–µ–∑ –∞–≤—Ç–æ-–∑–∞–≥—Ä—É–∑–∫–∏
   * @param {string} ticker - –¢–∏–∫–µ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
   * @param {number} days - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
   */
  async getCandles(ticker, days = 30) {
    try {
      const response = await api.get(`/api/candles/${ticker}`, {
        params: { days } // ‚úÖ –£–±—Ä–∞–ª–∏ limit
      })
      return response.data
    } catch (error) {
      if (error.response?.status === 404) {
        throw new Error(`No candle data available for ${ticker}. Use smart load to load historical data first.`)
      }
      throw new Error(`Failed to get candles for ${ticker}: ${error.response?.data?.detail || error.message}`)
    }
  },

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
   * @param {string} ticker - –¢–∏–∫–µ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
   */
  async getCurrentPrice(ticker) {
    try {
      const response = await api.get(`/api/market/${ticker}/price`)
      return response.data
    } catch (error) {
      // –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞ - –º–æ–∂–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
      console.warn(`Failed to get current price for ${ticker}:`, error.message)
      return null
    }
  },

  // ===== üéØ –°–ò–ì–ù–ê–õ–´ =====
  
  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ —Ç–∏–∫–µ—Ä—É
   * @param {string} ticker - –¢–∏–∫–µ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
   * @param {number} days - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
   * @param {number} limit - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–æ–≤
   */
  async getSignalsByTicker(ticker, days = 365, limit = 100) {
    try {
      const response = await api.get(`/api/signals/ticker/${ticker}`, {
        params: { days, limit }
      })
      return response.data
    } catch (error) {
      throw new Error(`Failed to get signals for ${ticker}: ${error.response?.data?.detail || error.message}`)
    }
  },

  async getTraders() {
    try {
      const response = await api.get('/api/traders');
      return response.data;  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞—Å—Å–∏–≤ —Ç—Ä–µ–π–¥–µ—Ä–æ–≤
    } catch (error) {
      console.error('Error fetching traders:', error);
      throw error;  // –ß—Ç–æ–±—ã –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∞—Å—å –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ
    }
  },

  async getTraderStats(traderId) {
    try {
      const response = await api.get(`/api/traders/${traderId}`);
      return response.data;  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    } catch (error) {
      console.error(`Error fetching trader stats for ${traderId}:`, error);
      throw error;
    }
  },

  getTraderSignals: async (traderId, params = {}) => {
    try {
      const ticker = params.ticker || null;
      const limit = params.limit || 100;
      const queryParams = {};
      if (ticker) queryParams.ticker = ticker;
      if (limit) queryParams.limit = limit;

      const response = await api.get(`/api/traders/${traderId}/signals`, { params: queryParams });
      return response.data;  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞—Å—Å–∏–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
    } catch (error) {
      console.error(`Error fetching signals for trader ${traderId}:`, error);
      throw error;
    }
  },

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
   * @param {number} days - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
   * @param {number} limit - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–æ–≤
   * @param {string} ticker - –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–∫–µ—Ä—É (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
   */
  async getAllSignals(days = 30, limit = 100, ticker = null) {
    try {
      const params = { days, limit }
      if (ticker) params.ticker = ticker
      
      const response = await api.get('/api/signals', { params })
      return response.data
    } catch (error) {
      throw new Error(`Failed to get signals: ${error.response?.data?.detail || error.message}`)
    }
  },

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Ç—Ä–µ–π–¥–µ—Ä—É
   * @param {string} trader - –ò–º—è —Ç—Ä–µ–π–¥–µ—Ä–∞
   * @param {number} days - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
   * @param {number} limit - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–æ–≤
   */
  async getSignalsByTrader(trader, days = 30, limit = 100) {
    try {
      const response = await api.get(`/api/signals/trader/${trader}`, {
        params: { days, limit }
      })
      return response.data
    } catch (error) {
      throw new Error(`Failed to get signals for trader ${trader}: ${error.response?.data?.detail || error.message}`)
    }
  },

  // ===== üìà –¢–ò–ö–ï–†–´ –ò –ò–ù–°–¢–†–£–ú–ï–ù–¢–´ =====
  
  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤
   */
  async getTickers() {
    try {
      const response = await api.get('/api/tickers')
      return response.data
    } catch (error) {
      throw new Error(`Failed to get tickers: ${error.response?.data?.detail || error.message}`)
    }
  },

  /**
   * –ü–æ–∏—Å–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ —Ç–∏–∫–µ—Ä—É
   * @param {string} query - –ü–æ–∏—Å–∫–æ–≤–æ–π –∑–∞–ø—Ä–æ—Å
   */
  async searchInstruments(query) {
    try {
      const response = await api.get('/api/instruments/search', {
        params: { q: query }
      })
      return response.data
    } catch (error) {
      throw new Error(`Failed to search instruments: ${error.response?.data?.detail || error.message}`)
    }
  },

  // ===== üîÑ –£–ú–ù–ê–Ø –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• =====
  
  /**
   * –£–º–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–∫–µ—Ä–∞
   * @param {string} ticker - –¢–∏–∫–µ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
   * @param {number} days - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
   * @param {boolean} force - –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
   */
  async smartLoadData(ticker, days = 365, force = false) {
    try {
      const params = { days }
      if (force) params.force = true
      
      const response = await api.post(`/api/data/smart-load/${ticker}`, null, { params })
      return response.data
    } catch (error) {
      throw new Error(`Failed to smart load data for ${ticker}: ${error.response?.data?.detail || error.message}`)
    }
  },

  /**
   * –ú–∞—Å—Å–æ–≤–∞—è —É–º–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–∫–µ—Ä–æ–≤ —Å —Å–∏–≥–Ω–∞–ª–∞–º–∏
   */
  async bulkSmartLoad() {
    try {
      const response = await api.post('/api/data/bulk-smart-load')
      return response.data
    } catch (error) {
      throw new Error(`Failed to perform bulk smart load: ${error.response?.data?.detail || error.message}`)
    }
  },

  /**
   * –£–º–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ—á–µ–π —Å –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–æ–π –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
   * @param {string} ticker - –¢–∏–∫–µ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
   * @param {number} days - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
   * @param {boolean} forceLoad - –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
   */
  async getCandlesWithSmartLoad(ticker, days = 30, forceLoad = false) {
    try {
      // –ï—Å–ª–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ - —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      if (forceLoad) {
        console.log(`üîÑ Force loading data for ${ticker}...`)
        await this.smartLoadData(ticker, Math.max(days, 365), true)
      }

      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
      try {
        return await this.getCandles(ticker, days)
      } catch (error) {
        // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∏ –Ω–µ –±—ã–ª–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ - –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å
        if (error.message.includes('No candle data available') && !forceLoad) {
          console.log(`üî• No data found for ${ticker}, attempting smart load...`)
          
          await this.smartLoadData(ticker, Math.max(days, 365), true)
          
          // –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
          return await this.getCandles(ticker, days)
        }
        
        throw error
      }
    } catch (error) {
      throw new Error(`Failed to get candles with smart load for ${ticker}: ${error.message}`)
    }
  },

  // ===== üìä –ü–û–ö–†–´–¢–ò–ï –î–ê–ù–ù–´–• =====
  
  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∫—Ä—ã—Ç–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–∏–∫–µ—Ä–∞
   * @param {string} ticker - –¢–∏–∫–µ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
   * @param {number} days - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
   */
  async getDataCoverage(ticker, days = 30) {
    try {
      const response = await api.get(`/api/data/coverage/${ticker}`, {
        params: { days }
      })
      return response.data
    } catch (error) {
      throw new Error(`Failed to get data coverage for ${ticker}: ${error.response?.data?.detail || error.message}`)
    }
  },

  // ===== üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê =====
  
  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã
   */
  async getStatistics() {
    try {
      const response = await api.get('/api/statistics')
      return response.data
    } catch (error) {
      throw new Error(`Failed to get statistics: ${error.response?.data?.detail || error.message}`)
    }
  },

  // ===== üõ†Ô∏è –£–ü–†–ê–í–õ–ï–ù–ò–ï –î–ê–ù–ù–´–ú–ò =====
  
  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
   */
  async getParsingStatus() {
    try {
      const response = await api.get('/api/messages/parsing-status')
      return response.data
    } catch (error) {
      throw new Error(`Failed to get parsing status: ${error.response?.data?.detail || error.message}`)
    }
  },

  /**
   * –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
   * @param {number} limit - –õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
   */
  async startMessageParsing(limit = null) {
    try {
      const params = limit ? { limit } : {}
      const response = await api.post('/api/messages/parse', null, { params })
      return response.data
    } catch (error) {
      throw new Error(`Failed to start message parsing: ${error.response?.data?.detail || error.message}`)
    }
  }
}

export default tradingAPI