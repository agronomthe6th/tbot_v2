// frontend/src/stores/tradingStore.js - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
import { defineStore } from 'pinia'
import { ref, computed } from 'vue'
import { tradingAPI } from '../services/api.js'

export const useTradingStore = defineStore('trading', () => {
  // ===== üéØ –û–°–ù–û–í–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï =====
  const selectedTicker = ref('SBER')
  const candlesData = ref([])
  const signalsData = ref([])
  const availableTickers = ref([])
  const currentPrice = ref(null)
  
  // ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä–∞–º–æ–∫
  const chartDays = ref(30)
  const signalsDays = ref(365)
  const autoLoadEnabled = ref(true) // –í–∫–ª—é—á–∏—Ç—å —É–º–Ω—É—é –∞–≤—Ç–æ-–∑–∞–≥—Ä—É–∑–∫—É
  
  // üìÑ –ó–∞–≥—Ä—É–∑–æ—á–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const isLoadingCandles = ref(false)
  const isLoadingSignals = ref(false)
  const isLoadingTickers = ref(false)
  const isAutoLoading = ref(false)
  
  // ‚ùå –û—à–∏–±–∫–∏
  const candlesError = ref(null)
  const signalsError = ref(null)
  const tickersError = ref(null)
  
  // üìä –°—Ç–∞—Ç—É—Å –¥–∞–Ω–Ω—ã—Ö
  const dataCoverage = ref(null)
  const lastAutoLoadTime = ref(null)
  
  // ===== üí´ –í–´–ß–ò–°–õ–Ø–ï–ú–´–ï –°–í–û–ô–°–¢–í–ê =====
  
  const formattedCandles = computed(() => {
    return candlesData.value.map(candle => ({
      time: new Date(candle.time).getTime() / 1000,
      open: candle.open,
      high: candle.high,
      low: candle.low,
      close: candle.close,
      volume: candle.volume
    }))
  })
  
  const hasData = computed(() => candlesData.value.length > 0)
  
  const isLoading = computed(() => 
    isLoadingCandles.value || isLoadingSignals.value || isAutoLoading.value
  )
  
  const dataQuality = computed(() => {
    if (!dataCoverage.value) return null
    
    const coverage = dataCoverage.value.coverage
    if (coverage.coverage_percentage >= 90) return 'excellent'
    if (coverage.coverage_percentage >= 70) return 'good'
    if (coverage.coverage_percentage >= 50) return 'fair'
    return 'poor'
  })
  
  // ===== üìã –ú–ï–¢–û–î–´ –ó–ê–ì–†–£–ó–ö–ò –¢–ò–ö–ï–†–û–í =====
  
  async function loadTickers() {
    isLoadingTickers.value = true
    tickersError.value = null
    
    try {
      const response = await tradingAPI.getTickers()
      availableTickers.value = response.sort((a, b) => b.signal_count - a.signal_count)
      console.log('üìä Loaded tickers:', availableTickers.value.length)
    } catch (error) {
      tickersError.value = error.message
      console.error('‚ùå Error loading tickers:', error)
    } finally {
      isLoadingTickers.value = false
    }
  }
  
  // ===== üïØÔ∏è –ú–ï–¢–û–î–´ –ó–ê–ì–†–£–ó–ö–ò –°–í–ï–ß–ï–ô =====
  
  async function loadCandles(ticker = selectedTicker.value, days = chartDays.value, forceLoad = false) {
    isLoadingCandles.value = true
    candlesError.value = null
    
    try {
      console.log(`üìà Loading candles for ${ticker} (${days} days)${forceLoad ? ' [FORCE]' : ''}...`)
      
      let response
      
      if (autoLoadEnabled.value || forceLoad) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–º–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É —Å –∞–≤—Ç–æ-–∑–∞–≥—Ä—É–∑–∫–æ–π –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        response = await tradingAPI.getCandlesWithSmartLoad(ticker, days, forceLoad)
      } else {
        // –¢–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ –∏–∑ –ë–î
        response = await tradingAPI.getCandles(ticker, days)
      }
      
      if (response.candles && response.candles.length > 0) {
        candlesData.value = response.candles
        console.log(`‚úÖ Loaded ${response.candles.length} candles for ${ticker}`)
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∫—Ä—ã—Ç–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
        if (autoLoadEnabled.value) {
          await checkDataCoverage(ticker)
        }
      } else {
        candlesData.value = []
        candlesError.value = `No candle data available for ${ticker}.`
      }
      
    } catch (error) {
      console.error('‚ùå Error loading candles:', error)
      candlesError.value = error.message
      candlesData.value = []
    } finally {
      isLoadingCandles.value = false
    }
  }
  
  // ===== üéØ –ú–ï–¢–û–î–´ –ó–ê–ì–†–£–ó–ö–ò –°–ò–ì–ù–ê–õ–û–í =====
  
  async function loadSignals(ticker = selectedTicker.value, days = signalsDays.value) {
    isLoadingSignals.value = true
    signalsError.value = null
    
    try {
      console.log(`üéØ Loading signals for ${ticker} (${days} days)...`)
      
      const response = await tradingAPI.getSignalsByTicker(ticker, days)
      
      if (response.signals) {
        signalsData.value = response.signals
        console.log(`‚úÖ Loaded ${response.signals.length} signals for ${ticker}`)
      } else {
        signalsData.value = []
      }
      
    } catch (error) {
      console.error('‚ùå Error loading signals:', error)
      signalsError.value = error.message
      signalsData.value = []
    } finally {
      isLoadingSignals.value = false
    }
  }
  
  // ===== üí∞ –ó–ê–ì–†–£–ó–ö–ê –¢–ï–ö–£–©–ï–ô –¶–ï–ù–´ =====
  
  async function loadCurrentPrice(ticker = selectedTicker.value) {
    try {
      const priceData = await tradingAPI.getCurrentPrice(ticker)
      if (priceData) {
        currentPrice.value = priceData.price
        console.log(`üí∞ Current price for ${ticker}: ${priceData.price}`)
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è Failed to load current price:', error.message)
    }
  }
  
  // ===== üìä –ü–†–û–í–ï–†–ö–ê –ü–û–ö–†–´–¢–ò–Ø –î–ê–ù–ù–´–• =====
  
  async function checkDataCoverage(ticker = selectedTicker.value) {
    try {
      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º getDataCoverage –≤–º–µ—Å—Ç–æ checkDataCoverage
      const coverage = await tradingAPI.getDataCoverage(ticker, Math.max(chartDays.value, signalsDays.value))
      dataCoverage.value = coverage
      return coverage
    } catch (error) {
      console.warn('‚ö†Ô∏è Failed to check data coverage:', error.message)
      return null
    }
  }
  
  // ===== üîÑ –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–û–°–¢–û–Ø–ù–ò–ï–ú =====
  
  async function setTicker(ticker) {
    const isActuallyChanging = ticker !== selectedTicker.value
    const hasNoData = candlesData.value.length === 0
    
    if (!isActuallyChanging && !hasNoData) return
    
    console.log(`üîÑ ${isActuallyChanging ? 'Switching to' : 'Loading data for'} ticker: ${ticker}`)
    selectedTicker.value = ticker
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    candlesData.value = []
    signalsData.value = []
    dataCoverage.value = null
    currentPrice.value = null
 
    if (isActuallyChanging) {
      candlesData.value = []
      signalsData.value = []
      dataCoverage.value = null
      currentPrice.value = null
    }

    await Promise.all([
        loadCandles(ticker, chartDays.value),
        loadSignals(ticker, signalsDays.value), 
        loadCurrentPrice(ticker)
      ])
  }
  
  async function setChartDays(days) {
    chartDays.value = days
    await loadCandles(selectedTicker.value, days)
  }
  
  async function setSignalsDays(days) {
    signalsDays.value = days
    await loadSignals(selectedTicker.value, days)
  }
  
  function setAutoLoadEnabled(enabled) {
    autoLoadEnabled.value = enabled
    console.log(`üîß Auto-load ${enabled ? 'enabled' : 'disabled'}`)
    
    if (enabled) {
      checkDataCoverage()
    }
  }
  
  function clearErrors() {
    candlesError.value = null
    signalsError.value = null
    tickersError.value = null
  }
  
  // ===== üõ†Ô∏è –£–¢–ò–õ–ò–¢–´ –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –î–ê–ù–ù–´–ú–ò =====
  
  /**
   * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  async function forceReloadData() {
    console.log('üîÑ Force reloading all data...')
    clearErrors()
    
    await Promise.all([
      loadCandles(selectedTicker.value, chartDays.value, true), // force=true
      loadSignals(selectedTicker.value, signalsDays.value),
      loadCurrentPrice(selectedTicker.value)
    ])
  }
  
  /**
   * –Ø–≤–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–∏–∫–µ—Ä–∞
   */
  async function manualLoadData(ticker = selectedTicker.value, maxDays = 365) {
    isAutoLoading.value = true
    
    try {
      console.log(`üîÑ Manual smart load for ${ticker}...`)
      
      const result = await tradingAPI.smartLoadData(ticker, maxDays, true)
      console.log('‚úÖ Manual load completed:', result)
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤–µ—á–∏ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
      await loadCandles(ticker, chartDays.value, false)
      
      lastAutoLoadTime.value = new Date()
      return result
    } catch (error) {
      console.error('‚ùå Manual load failed:', error)
      throw error
    } finally {
      isAutoLoading.value = false
    }
  }
  
  /**
   * –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä–∞–º–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  async function optimizeTimeframes() {
    const coverage = await checkDataCoverage()
    if (!coverage) return
    
    const availableDays = coverage.coverage.period_days
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏ –ø–æ–¥ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if (chartDays.value > availableDays) {
      console.log(`üìÖ Optimizing chart days from ${chartDays.value} to ${availableDays}`)
      chartDays.value = Math.min(availableDays, 90)
      await loadCandles()
    }
  }
  
  /**
   * –ú–∞—Å—Å–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  async function bulkLoadMissingData() {
    isAutoLoading.value = true
    
    try {
      console.log('üöÄ Starting bulk smart load...')
      const result = await tradingAPI.bulkSmartLoad()
      console.log('‚úÖ Bulk load completed:', result)
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ç–∏–∫–µ—Ä–∞
      await forceReloadData()
      
      lastAutoLoadTime.value = new Date()
      return result
    } catch (error) {
      console.error('‚ùå Bulk load failed:', error)
      throw error
    } finally {
      isAutoLoading.value = false
    }
  }
  
  
async function initialize() {
  console.log('üöÄ Initializing Trading Store...')
  
  try {
    await loadTickers()
    
    const currentTicker = selectedTicker.value || 'SBER'
    console.log('üéØ Initializing with ticker:', currentTicker)
    
    await setTicker(currentTicker)
  } catch (error) {
    console.error('‚åê Initialization error:', error)
  }
}
  
  // ===== üì§ –≠–ö–°–ü–û–†–¢ =====
  
  return {
    // üéØ –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    selectedTicker,
    candlesData,
    signalsData,
    availableTickers,
    currentPrice,
    chartDays,
    signalsDays,
    autoLoadEnabled,
    dataCoverage,
    lastAutoLoadTime,
    
    // üìÑ –ó–∞–≥—Ä—É–∑–æ—á–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    isLoadingCandles,
    isLoadingSignals,
    isLoadingTickers,
    isAutoLoading,
    
    // ‚ùå –û—à–∏–±–∫–∏
    candlesError,
    signalsError,
    tickersError,
    
    // üí´ –í—ã—á–∏—Å–ª—è–µ–º—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
    formattedCandles,
    hasData,
    isLoading,
    dataQuality,
    
    // üìã –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    loadTickers,
    loadCandles,
    loadSignals,
    loadCurrentPrice,
    setTicker,
    setChartDays,
    setSignalsDays,
    setAutoLoadEnabled,
    clearErrors,
    
    // üõ†Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏
    checkDataCoverage,
    forceReloadData,
    manualLoadData,
    optimizeTimeframes,
    bulkLoadMissingData,
    
    // üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    initialize
  }
})