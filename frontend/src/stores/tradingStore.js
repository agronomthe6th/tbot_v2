// frontend/src/stores/tradingStore.js - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
import { defineStore } from 'pinia'
import { ref, computed } from 'vue'
import { tradingAPI } from '../services/api.js'

export const useTradingStore = defineStore('trading', () => {
  // ===== üéØ –û–°–ù–û–í–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï =====
  const selectedTicker = ref('SBER')
  const candlesData = ref([])
  const signalsData = ref([])
  const availableTickers = ref([])
  const currentPrice = ref(null)
  
  // ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä–∞–º–æ–∫ - –£–í–ï–õ–ò–ß–ï–ù–ù–´–ï –î–ï–§–û–õ–¢–´
  const chartDays = ref(30)
  const signalsDays = ref(30)
  const autoLoadEnabled = ref(true)
  
  // üîÑ –ó–∞–≥—Ä—É–∑–æ—á–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const isLoadingCandles = ref(false)
  const isLoadingSignals = ref(false)
  const isLoadingTickers = ref(false)
  const isAutoLoading = ref(false)
  
  // ‚ùå –û—à–∏–±–∫–∏
  const candlesError = ref(null)
  const signalsError = ref(null)
  const tickersError = ref(null)
  
  // üìä –û–ø—Ü–∏–∏ –ø–µ—Ä–∏–æ–¥–æ–≤ –¥–ª—è UI - –†–ê–°–®–ò–†–ï–ù–ù–´–ï
  const chartPeriodOptions = ref([
    { value: 7, label: '7 –¥–Ω–µ–π', description: '–ù–µ–¥–µ–ª—è' },
    { value: 30, label: '30 –¥–Ω–µ–π', description: '–ú–µ—Å—è—Ü' },
    { value: 90, label: '90 –¥–Ω–µ–π', description: '–ö–≤–∞—Ä—Ç–∞–ª' },
    { value: 180, label: '180 –¥–Ω–µ–π', description: '–ü–æ–ª–≥–æ–¥–∞' },
    { value: 365, label: '365 –¥–Ω–µ–π', description: '–ì–æ–¥' },
  ])
  
  // ===== üìà COMPUTED –ì–ï–¢–¢–ï–†–´ =====
  
  const isLoading = computed(() => 
    isLoadingCandles.value || isLoadingSignals.value || isLoadingTickers.value || isAutoLoading.value
  )
  
  const formattedCandles = computed(() => {
    if (!candlesData.value || !Array.isArray(candlesData.value)) {
      return []
    }
    
    console.log('üìä Store: Formatting candles, sample data:', candlesData.value.slice(0, 2))
    
    return candlesData.value.map(candle => {
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ API
      let timeValue
      
      if (candle.time !== undefined) {
        timeValue = candle.time
      } else if (candle.timestamp !== undefined) {
        timeValue = candle.timestamp  
      } else if (candle.datetime !== undefined) {
        timeValue = candle.datetime
      } else if (candle.date !== undefined) {
        timeValue = candle.date
      } else {
        console.warn('‚ö†Ô∏è No time field found in candle from API:', Object.keys(candle))
        timeValue = Date.now() / 1000 // fallback
      }
      
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ Unix timestamp –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
      if (typeof timeValue === 'string') {
        timeValue = Math.floor(new Date(timeValue).getTime() / 1000)
      }
      
      const formatted = {
        time: timeValue,
        open: parseFloat(candle.open || candle.o || 0),
        high: parseFloat(candle.high || candle.h || 0),
        low: parseFloat(candle.low || candle.l || 0),
        close: parseFloat(candle.close || candle.c || 0),
        volume: candle.volume || candle.v || 0
      }
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
      const isValid = formatted.open > 0 && formatted.high > 0 && 
                     formatted.low > 0 && formatted.close > 0 && 
                     !isNaN(formatted.time)
      
      if (!isValid) {
        console.warn('‚ö†Ô∏è Invalid candle data:', { original: candle, formatted })
      }
      
      return formatted
    }).filter(candle => 
      // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ —Å–≤–µ—á–∏
      candle.open > 0 && candle.high > 0 && candle.low > 0 && candle.close > 0 && !isNaN(candle.time)
    ).sort((a, b) => a.time - b.time) // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
  })
  
  const currentPeriodInfo = computed(() => {
    const option = chartPeriodOptions.value.find(opt => opt.value === chartDays.value)
    return option || { value: chartDays.value, label: `${chartDays.value} –¥–Ω–µ–π`, description: '–ö–∞—Å—Ç–æ–º–Ω—ã–π' }
  })
  
  // ===== üîß –û–°–ù–û–í–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø =====
  
  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ —Å–≤–µ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  async function loadCandles(ticker = selectedTicker.value, days = chartDays.value, force = false) {
    if (isLoadingCandles.value && !force) {
      console.log('‚è≥ Candles already loading, skipping...')
      return
    }
    
    isLoadingCandles.value = true
    candlesError.value = null
    
    try {
      console.log(`üìä Loading candles: ${ticker}, ${days} days`)
      
      const response = await tradingAPI.getCandles(ticker, days)
      
      console.log('üîç RAW Candles API Response:', response) // DEBUG
      
      if (response && response.candles) {
        console.log(`üìä API returned ${response.candles.length} candles`)
        
        // DEBUG: –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–µ—Ä–≤–æ–π —Å–≤–µ—á–∏
        if (response.candles.length > 0) {
          const firstCandle = response.candles[0]
          console.log('üîç First candle structure:', {
            candle: firstCandle,
            keys: Object.keys(firstCandle),
            timeField: firstCandle.time || firstCandle.timestamp || firstCandle.datetime || 'NO_TIME',
            timeType: typeof (firstCandle.time || firstCandle.timestamp || firstCandle.datetime)
          })
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
          const requiredFields = ['open', 'high', 'low', 'close']
          const missingFields = requiredFields.filter(field => 
            firstCandle[field] === undefined && firstCandle[field.charAt(0)] === undefined
          )
          
          if (missingFields.length > 0) {
            console.warn('‚ö†Ô∏è Missing required fields:', missingFields)
          }
        }
        
        candlesData.value = response.candles
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–∏
        if (response.candles.length > 0) {
          const sortedCandles = [...response.candles].sort((a, b) => {
            const timeA = a.time || a.timestamp || a.datetime
            const timeB = b.time || b.timestamp || b.datetime
            
            if (typeof timeA === 'string' && typeof timeB === 'string') {
              return new Date(timeA).getTime() - new Date(timeB).getTime()
            }
            return timeA - timeB
          })
          
          const lastCandle = sortedCandles[sortedCandles.length - 1]
          currentPrice.value = lastCandle.close || lastCandle.c
          
          console.log(`üí∞ Updated current price: ${currentPrice.value}`)
        }
        
        console.log(`‚úÖ Loaded ${response.candles.length} candles for ${ticker}`)
      } else {
        console.warn('‚ö†Ô∏è No candles data in response:', response)
        throw new Error('No candles data in response')
      }
      
    } catch (error) {
      console.error('‚ùå Error loading candles:', error)
      console.error('‚ùå Error details:', error.response?.data)
      candlesError.value = error.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–≤–µ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö'
      candlesData.value = []
    } finally {
      isLoadingCandles.value = false
    }
  }
  
  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
   */
  async function loadSignals(ticker = selectedTicker.value, days = signalsDays.value, force = false) {
    if (isLoadingSignals.value && !force) {
      console.log('‚è≥ Signals already loading, skipping...')
      return
    }
    
    isLoadingSignals.value = true
    signalsError.value = null
    
    try {
      console.log(`üéØ Loading signals: ${ticker}, ${days} days`)
      
      const response = await tradingAPI.getSignalsByTicker(ticker, days)
      
      console.log('üîç RAW API Response:', response) // DEBUG: —Å–º–æ—Ç—Ä–∏–º —á—Ç–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç —Å API
      
      if (response && Array.isArray(response.signals)) {
        signalsData.value = response.signals
        console.log(`‚úÖ Loaded ${response.signals.length} signals for ${ticker}`)
        
        // DEBUG: –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–µ—Ä–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        if (response.signals.length > 0) {
          console.log('üîç DETAILED signals analysis:')
          response.signals.slice(0, 3).forEach((signal, index) => {
            console.log(`Signal ${index + 1}:`, {
              id: signal.id,
              direction: signal.direction,
              author: signal.author,
              trader: signal.trader, // –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –ø–æ–ª—è
              timestamp: signal.timestamp,
              ticker: signal.ticker,
              ALL_FIELDS: Object.keys(signal), // —Å–º–æ—Ç—Ä–∏–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è
              FULL_SIGNAL: signal // –ø–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç —Å–∏–≥–Ω–∞–ª–∞
            })
          })
        }
      } else if (response && Array.isArray(response)) {
        // –ò–Ω–æ–≥–¥–∞ API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –Ω–∞–ø—Ä—è–º—É—é
        signalsData.value = response
        console.log(`‚úÖ Loaded ${response.length} signals directly`)
        
        // DEBUG: –∞–Ω–∞–ª–∏–∑ –ø—Ä—è–º–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
        if (response.length > 0) {
          console.log('üîç DIRECT array signals analysis:')
          response.slice(0, 3).forEach((signal, index) => {
            console.log(`Direct Signal ${index + 1}:`, {
              author: signal.author,
              trader: signal.trader,
              ALL_FIELDS: Object.keys(signal),
              FULL_SIGNAL: signal
            })
          })
        }
      } else {
        signalsData.value = []
        console.log('‚ÑπÔ∏è No signals found for', ticker)
        console.log('üîç Response structure:', response) // DEBUG: —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞
      }
      
    } catch (error) {
      console.error('‚ùå Error loading signals:', error)
      console.error('‚ùå Error details:', error.response?.data) // DEBUG: –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏
      signalsError.value = error.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤'
      signalsData.value = []
    } finally {
      isLoadingSignals.value = false
    }
  }
  
  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤
   */
  async function loadTickers() {
    if (isLoadingTickers.value) return
    
    isLoadingTickers.value = true
    tickersError.value = null
    
    try {
      console.log('üìã Loading available tickers...')
      
      const response = await tradingAPI.getAvailableTickers()
      
      if (Array.isArray(response)) {
        availableTickers.value = response
        console.log(`‚úÖ Loaded ${response.length} tickers`)
      } else {
        availableTickers.value = []
        console.log('‚ö†Ô∏è No tickers received')
      }
      
    } catch (error) {
      console.error('‚ùå Error loading tickers:', error)
      tickersError.value = error.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ —Ç–∏–∫–µ—Ä–æ–≤'
      availableTickers.value = []
    } finally {
      isLoadingTickers.value = false
    }
  }
  
  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–∏–∫–µ—Ä–∞
   */
  async function loadAllData(ticker = selectedTicker.value, force = false) {
    if (isAutoLoading.value && !force) return
    
    isAutoLoading.value = true
    
    try {
      console.log(`üöÄ Loading all data for ${ticker}`)
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å–≤–µ—á–∏ –∏ —Å–∏–≥–Ω–∞–ª—ã
      await Promise.allSettled([
        loadCandles(ticker, chartDays.value, force),
        loadSignals(ticker, signalsDays.value, force)
      ])
      
      console.log(`‚úÖ All data loaded for ${ticker}`)
      
    } finally {
      isAutoLoading.value = false
    }
  }
  
  // ===== üéõÔ∏è –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–ï–†–ò–û–î–ê–ú–ò - –ù–û–í–´–ï –ú–ï–¢–û–î–´ =====
  
  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
   */
  function setChartDays(days) {
    console.log(`üìÖ Setting chart days: ${days}`)
    chartDays.value = days
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞
    if (autoLoadEnabled.value) {
      loadAllData(selectedTicker.value, true)
    }
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤  
   */
  function setSignalsDays(days) {
    console.log(`üéØ Setting signals days: ${days}`)
    signalsDays.value = days
    if (autoLoadEnabled.value) {
      loadSignals(selectedTicker.value, days, true)
    }
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É
   */
  function setAutoLoadEnabled(enabled) {
    console.log(`‚öôÔ∏è Setting auto load: ${enabled}`)
    autoLoadEnabled.value = enabled
  }
  
  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤–∏–¥ (180 –¥–Ω–µ–π)
   */
  function setStandardView() {
    console.log('üìÖ Setting standard view (180 days)')
    chartDays.value = 180
    signalsDays.value = 180
    loadAllData(selectedTicker.value, true)
  }
  
  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–æ–¥–æ–≤–æ–π –≤–∏–¥ (365 –¥–Ω–µ–π)
   */
  function setYearView() {
    console.log('üìÖ Setting year view (365 days)')
    chartDays.value = 365
    signalsDays.value = 365
    loadAllData(selectedTicker.value, true)
  }
  
  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø–µ—Ä–∏–æ–¥
   */
  function setCustomPeriod(days) {
    console.log(`üìÖ Setting custom period: ${days} days`)
    chartDays.value = days
    signalsDays.value = days
    loadAllData(selectedTicker.value, true)
  }
  
  // ===== üßπ –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ =====
  
  function clearErrors() {
    candlesError.value = null
    signalsError.value = null
    tickersError.value = null
  }
  
  function clearData() {
    candlesData.value = []
    signalsData.value = []
    currentPrice.value = null
    clearErrors()
  }
  
  /**
   * –°–º–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∏–∫–µ—Ä–∞
   */
  async function setSelectedTicker(ticker) {
    if (selectedTicker.value === ticker) return
    
    console.log(`üîÑ Changing ticker: ${selectedTicker.value} -> ${ticker}`)
    
    selectedTicker.value = ticker
    clearData()
    
    if (autoLoadEnabled.value) {
      await loadAllData(ticker)
    }
  }

  /**
   * –ê–ª–∏–∞—Å –¥–ª—è setSelectedTicker –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
   */
  async function setTicker(ticker) {
    console.log(`üîÑ setTicker called (alias for setSelectedTicker): ${ticker}`)
    return await setSelectedTicker(ticker)
  }
  
  /**
   * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
   */
  async function refreshData() {
    console.log('üîÑ Force refreshing data...')
    clearErrors()
    await loadAllData(selectedTicker.value, true)
  }
  
  // ===== üõ†Ô∏è –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò =====
  
  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∫—Ä—ã—Ç–∏—è –¥–∞–Ω–Ω—ã—Ö
   */
  async function checkDataCoverage(ticker = selectedTicker.value) {
    try {
      const response = await tradingAPI.checkDataCoverage(ticker, chartDays.value)
      console.log('üìä Data coverage check:', response)
      return response
    } catch (error) {
      console.error('‚ùå Error checking data coverage:', error)
      return null
    }
  }
  
  /**
   * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
   */
  async function forceReloadData(ticker = selectedTicker.value) {
    try {
      console.log(`üîÑ Force reloading data for ${ticker}...`)
      
      // –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å API –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
      const response = await tradingAPI.smartLoadData(ticker)
      console.log('üîÑ Force reload API response:', response)
      
      // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
      await refreshData()
      return response
    } catch (error) {
      console.error('‚ùå Force reload API failed, falling back to regular refresh:', error)
      
      // –ï—Å–ª–∏ API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –¥–µ–ª–∞–µ–º –æ–±—ã—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      await refreshData()
      return { success: false, fallback: true, error: error.message }
    }
  }
  
  /**
   * –†—É—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
   */
  async function manualLoadData(ticker, days = 180) {
    try {
      const response = await tradingAPI.manualLoadData(ticker, days)
      console.log('üì• Manual load response:', response)
      await refreshData()
      return response
    } catch (error) {
      console.error('‚ùå Error manual loading data:', error)
      return null
    }
  }
  
  /**
   * –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä–∞–º–æ–∫
   */
  function optimizeTimeframes() {
    // –ï—Å–ª–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –º–∞–ª–æ, —É–º–µ–Ω—å—à–∞–µ–º –ø–µ—Ä–∏–æ–¥
    if (signalsData.value.length < 5 && signalsDays.value > 30) {
      console.log('üìâ Few signals, optimizing timeframe')
      setCustomPeriod(Math.max(30, signalsDays.value / 2))
    }
  }
  
  /**
   * –ú–∞—Å—Å–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  async function bulkLoadMissingData() {
    try {
      const response = await tradingAPI.bulkLoadMissingData()
      console.log('üì¶ Bulk load response:', response)
      return response
    } catch (error) {
      console.error('‚ùå Error bulk loading data:', error)
      return null
    }
  }
  
  // ===== üöÄ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø =====
  
  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è store
   */
  async function initialize() {
    console.log('üöÄ Initializing trading store...')
    
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤
      await loadTickers()
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ —Ç–∏–∫–µ—Ä–∞
      if (autoLoadEnabled.value) {
        await loadAllData()
      }
      
      console.log('‚úÖ Trading store initialized')
    } catch (error) {
      console.error('‚ùå Error initializing trading store:', error)
    }
  }
  
  // ===== üì§ –≠–ö–°–ü–û–†–¢ =====
  
  return {
    // üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ
    selectedTicker,
    candlesData,
    signalsData,
    availableTickers,
    currentPrice,
    
    // ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    chartDays,
    signalsDays,
    autoLoadEnabled,
    chartPeriodOptions,
    
    // üîÑ –ó–∞–≥—Ä—É–∑–æ—á–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    isLoading,
    isLoadingCandles,
    isLoadingSignals,
    isLoadingTickers,
    isAutoLoading,
    
    // ‚ùå –û—à–∏–±–∫–∏
    candlesError,
    signalsError,
    tickersError,
    
    // üìà Computed
    formattedCandles,
    currentPeriodInfo,
    
    // üîß –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    loadCandles,
    loadSignals,
    loadTickers,
    loadAllData,
    setSelectedTicker,
    setTicker, // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –∞–ª–∏–∞—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    refreshData,
    
    // üßπ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ
    clearErrors,
    clearData,
    
    // üéõÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞–º–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    setChartDays,
    setSignalsDays, 
    setAutoLoadEnabled,
    setStandardView,
    setYearView,
    setCustomPeriod,
    
    // üõ†Ô∏è –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏
    checkDataCoverage,
    forceReloadData,
    manualLoadData,
    optimizeTimeframes,
    bulkLoadMissingData,
    
    // üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    initialize
  }
})